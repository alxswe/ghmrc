name: deploy
run-name: ${{ github.actor }} is running GHMRC CI/CD ðŸš€

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master
    workflow_dispatch:

jobs:
    generate-matrix:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - name: Set matrix
              id: set-matrix
              run: |
                  echo "::set-output name=matrix::{\"database\": [\"sqlite\", \"postgres\"], \"python\": [\"3.10\", \"3.11\"], \"django\": [\"4.2\"]}"

    lint-django:
        runs-on: ubuntu-latest
        environment: production
        defaults:
            run:
                working-directory: django

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.x"
                  cache: "pip"

            - name: Install tools needed
              run: pip install tox

            - name: Check migrations
              run: tox -e migrations

    test-django:
        needs: generate-matrix
        timeout-minutes: 15
        runs-on: ubuntu-latest
        environment: production
        services:
            redis: # must test redis cache
                image: redis:latest
                ports:
                    - 6379:6379
                options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
            memcached: # must test memcached cache
                image: memcached:latest
                ports:
                    - 11211:11211
                options: --health-cmd "telnet localhost 11211" --health-interval 10s --health-timeout 5s --health-retries 5
            postgres: # must test postgres cache
                image: postgres:latest
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres
                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        strategy:
            max-parallel: 1
            fail-fast: false
            matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

        defaults:
            run:
                working-directory: django

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup python v${{ matrix.python }}
              uses: actions/setup-python@v4
              with:
                  python-version: "${{ matrix.python }}"
                  cache: pip

            - name: Install tools needed
              run: |
                  sudo apt install libpq-dev -yqq

            - name: Create virtualenv
              run: |
                  python -m venv ./venv
                  source ./venv/bin/activate
                  echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
                  echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

            - name: Cache virtualenv
              uses: actions/cache@v3
              with:
                  key: venv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-test.txt') }}
                  path: ./venv

            - name: Install requirements
              run: |
                  pip install -r requirements.txt
                  pip install -r requirements-test.txt

            - name: Install django
              run: |
                  pip install "Django==${{ matrix.django }}.*"

            - name: Run tests
              env:
                  DEBUG: 0
                  DATABASE_ENGINE: ${{ matrix.database }}
                  GITHUB_WORKFLOW: 1
              run: |
                  coverage run --append --source='.' runtests.py
                  coverage report --show-missing
                  coverage xml -o ./coverage.xml

            - name: Upload coverage to Codecov
              if: ${{ !github.event.act }}
              uses: codecov/codecov-action@v3
              env:
                  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
              with:
                  fail_ci_if_error: false
                  files: ./coverage.xml
                  flags: unittests
                  verbose: true

    lint-next:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: nextjs
        environment: production
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
              # cache: npm

            - name: Install dependencies
              run: npm install

            - name: Cache node modules
              id: cache-npm
              uses: actions/cache@v3
              env:
                  cache-name: cache-node-modules
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: ~/.npm
                  key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-build-
                      ${{ runner.os }}-

            - name: Build with Next.js
              run: npm run build

            - name: Cache Next.js
              uses: actions/cache@v3
              with:
                  # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
                  path: |

                      nextjs/.next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

            - name: Lint Next.js
              run: npm run lint

    cd:
        needs:
            - lint-next
            - lint-django
            - test-django
        if: |
            always()
            && contains(needs.*.result, 'success')
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Log in to Docker Hub
              run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            - name: Set up Docker Compose
              run: |
                  sudo apt-get -y update
                  sudo apt-get -y install docker-ce docker-ce-cli containerd.io
                  sudo docker compose -f compose.yaml build

            - name: Push to Docker Hub
              if: ${{ !github.event.act }}
              run: sudo docker compose -f compose.yaml push
              env:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}
